#!/usr/bin/env python3
""" This was an incomplete script provided in a qwiklabs session
in module 3 in the Automating Real-World Tasks with Python course in
the Google Automation with python career certificate program that
proccesses data in a json file to generate a pdf file with data in
 table format and sends it as an attachment in an email
"""

import json
import locale
import sys
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  year_count = {}
  top_sales = 0
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # DONE: also handle max sales
  #find the car with the highest sales
  for item in data: 
    item_sales = item["total_sales"]
    if  item_sales > top_sales:
      top_sales = item_sales
      max_sales = "The {} had the most sales: {}".format(format_car(item["car"]), top_sales)
    # DONE: also handle most popular car_year
  #find the most popular car year based on total sales
  for item in data:
    if item["car"]["car_year"] not in year_count:
      year_count[item["car"]["car_year"]] = 0
      year_count[item["car"]["car_year"]] += item["total_sales"]
    elif item["car"]["car_year"] in year_count:
      year_count[item["car"]["car_year"]] += item["total_sales"]
    else:
      continue
    #sort the dictionary based on value of keys in the dictionaty
    sort_dict = dict(sorted(year_count.items(), key=lambda item: item[1], reverse=True))
    #store the first key-value pair from the sorted dictionary in variables
    most_year, year_sales = next(iter(sort_dict.items()))

  summary = ["The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"])]
  summary.append("The most popular year was {} with {} sales".format(most_year, year_sales))
  summary.append(max_sales)

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("/home/orthmox/Desktop/Google_python_automation/data/car_sales.json")
  summary = process_data(data)
  title = "Sales summary for last month"
  table_data = cars_dict_to_table(data)
  #format summary_data so that each item appears on a new line in the pdf file
  summary_data = "{}<br/> {}<br/> {}".format(summary[0], summary[1], summary[2])
  
  print(summary)
  
  # DONE: turn this into a PDF report
  reports.generate("/home/orthmox/Desktop/Google_python_automation/cars.pdf", title, summary_data, table_data)
  
  # TODO: send the PDF report as an email attachment
  From = "automation@example.com"
  To = "student@example.com"
  Subject = title
  #format the body of the email so that each item in the summary appears on a new line
  #in the email
  Body = "{}\n {}\n {}".format(summary[0], summary[1], summary[2])
  attachment = "/home/orthmox/Desktop/Google_python_automation/cars.pdf"
  
  message = emails.generate(From, To, Subject, Body, attachment)

  emails.send(message)


if __name__ == "__main__":
  main(sys.argv)
